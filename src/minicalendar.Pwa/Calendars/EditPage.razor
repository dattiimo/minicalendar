@page "/cal/{id:guid}/edit"
@using System.ComponentModel.DataAnnotations
@using minicalendar.Common.Calendars
@using minicalendar.Common.Calendars.Activities
@using minicalendar.Common.Forms.Validation
@using minicalendar.Common.Forms
@using minicalendar.Common.SortableList
@inject NavigationManager Nav
@inject ICalendarRepository CalendarRepo

<Header>
    <div></div>
    <div><PrimaryAction OnClickAsync="HandleSubmitAsync" Title="Done">Done</PrimaryAction></div>
</Header>

<article>
    <Container>
        @* Form fields *@
        <EditForm EditContext="_editContext" OnSubmit="HandleSubmitAsync" novalidate>
            <CustomDataAnnotationsValidator/>
            <div class="my-6">
                <label for="title" class="block my-2">Title</label>
                <InputText id="title" @bind-Value="_model.Title" class="flex py-2 px-4 w-full rounded-md border border-gray-400 shadow-sm sm:max-w-md text-gray-900"/>
                <ValidationMessage For="() => _model.Title" id="title_feedback" class="mx-2 py-1 text-red-800"/>
            </div>
            <div class="my-6">
                <label for="startDate" class="block my-2">Start On</label>
                <InputDate id="startDate" @bind-Value="_model.StartDate" class="py-2 px-4 w-full rounded-md border border-gray-400 shadow-sm sm:max-w-md text-gray-900"/>
                <ValidationMessage For="() => _model.StartDate" id="startDate_feedback" class="mx-2 py-1 text-red-800"/>
            </div>
            <div class="my-6">
                <label for="description" class="block my-2">Description (optional)</label>
                <InputText id="description" @bind-Value="_model.Description" class="flex py-2 px-4 w-full rounded-md border border-gray-400 shadow-sm sm:max-w-md text-gray-900"/>
                <ValidationMessage For="() => _model.Description" id="description_feedback" class="mx-2 py-1 text-red-800"/>
            </div>
        </EditForm>

        @* Activity list *@
        <div class="my-20">
            <label for="sortable" class="block my-2">Activities (optional)</label>
            @if (_model.Activities.Any())
            {
                <SortableList Id="sortable" Class="flex flex-col border rounded-md border-gray-300 divide-y text-lg"
                              Items="_activities" OnUpdate="@HandleActivityListUpdateAsync" Context="activity">
                    <SortableItemTemplate>
                        <li class="flex items-center px-2 sm:px-4 py-4 border-l-8 border-b-gray-300  
                                    first:rounded-tl-md last:rounded-bl-md 
                                    @Style.GetColourStyle("border-l", activity.ColourKind)">
                            <ChevronUpDownIcon class="size-6 text-gray-500 me-2 sm:me-4 hover:cursor-move"/>
                            <span class="select-none">@activity.Title</span>
                            <IconButton Class="ms-auto" Title="Edit activity" OnClick="async () => await HandleActivityEditAsync(activity.Id)">
                                <PencilSquareIcon class="size-6"/>
                            </IconButton>
                        </li>
                    </SortableItemTemplate>
                </SortableList>
            }
            else
            {
                <ul class="flex flex-col border rounded-md border-gray-300 divide-y ">
                    <li class="flex p-4 border-b-gray-300 first:rounded-tl-md last:rounded-bl-md">
                        <span class="select-none">No activities have been created.</span>
                    </li>
                </ul>
            }
            <div class="mt-4 flex justify-end">
                <PrimaryButton OnClickAsync="HandleActivityCreateAsync">Create new activity</PrimaryButton>
            </div>
        </div>

        @* Calendar actions *@
        <div class="my-20">
            <FormAction Title="Duplicate calendar" Text="Duplicate" OnClickAsync="HandleDuplicateClickAsync">Create a duplicate of this calendar and all of it's activities.</FormAction>
            <ActionDanger Title="Delete calender" Text="Delete calendar" OnClickAsync="HandleDeleteClickAsync">Delete this calendar and all of it's activities.</ActionDanger>
        </div>
    </Container>
</article>

@code {
    private EditContext? _editContext;
    private Calendar _model = new();
    private List<Activity> _activities = [];

    [Parameter]
    public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(_model);
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        var data = await CalendarRepo.GetByIdAsync(Id);
        if (data == Calendar.Empty)
        {
            Nav.NavigateTo($"notfound");
            return;
        }
        _model = data;
        // The model has changed so the EditContext needs updating.
        _editContext = new EditContext(_model);
        _activities = _model.Activities.ToList();
    }

    private async Task HandleSubmitAsync()
    {
        _editContext?.SetFieldCssClassProvider(new TwValidationCssClassProvider());
        var isValid = _editContext?.Validate() ?? false;
        if (isValid)
        {
            await HandleValidSubmitAsync();
        }
    }

    private async Task HandleValidSubmitAsync()
    {
        var data = await CalendarRepo.GetByIdAsync(Id);
        data.PopulateFrom(_model);
        await CalendarRepo.SaveItemAsync(data);
        Nav.NavigateTo($"cal/{_model.Id}");
    }

    private async Task HandleDuplicateClickAsync()
    {
        var cal = _model.Duplicate(postfix: " - copy");
        await CalendarRepo.SaveItemAsync(cal);
        Nav.NavigateTo($"cal/{cal.Id}");
    }

    private Task HandleDeleteClickAsync()
    {
        Nav.NavigateTo($"cal/{Id}/delete");
        return Task.CompletedTask;
    }

    private async Task HandleActivityListUpdateAsync((int oldIndex, int newIndex) indices)
    {
        var (oldIndex, newIndex) = indices;
        var items = _activities;
        var itemToMove = items[oldIndex];
        items.RemoveAt(oldIndex);

        if (newIndex < items.Count)
        {
            items.Insert(newIndex, itemToMove);
        }
        else
        {
            items.Add(itemToMove);
        }

        _model.Activities = _activities;
        await CalendarRepo.SaveItemAsync(_model);
    }
    
    private Task HandleActivityCreateAsync()
    {
        Nav.NavigateTo($"cal/{_model.Id}/activities/create?src=1");
        return Task.CompletedTask;
    }
    
    private Task HandleActivityEditAsync(Guid id)
    {
        var activity = _model.Activities.SingleOrDefault(x => x.Id == id);
        var slug = string.IsNullOrEmpty(activity?.Title) ? string.Empty : "/" + Uri.EscapeDataString(activity.Title.ToLower());
        Nav.NavigateTo($"cal/{_model.Id}/activities/{id}/edit{slug}?src=1");
        return Task.CompletedTask;
    }

}