@page "/cal/{id:guid}"
@using System.Text.Json
@using minicalendar.Common.ViewOrientation
@using minicalendar.Common.Calendars
@using minicalendar.Common.Calendars.Activities
@using minicalendar.Common.Core
@using minicalendar.Common.YearSpan
@using minicalendar.Pwa.Calendars.Components
@using minicalendar.Common.Blade
@using minicalendar.Common.Calendars.Publishing
@using minicalendar.Common.Forms
@using minicalendar.Common.ScrollToElement
@using minicalendar.Common.DateAndTime
@using minicalendar.Common.Drawer
@using minicalendar.Common.FeatureSwitch
@using minicalendar.Common.FileManager
@using CalendarPublication = minicalendar.Common.Calendars.CalendarPublication
@inject ICalendarRepository CalendarRepository
@inject TimeProvider TimeProvider
@inject NavigationManager Nav
@inject ILogger<CalendarPage> Logger
@inject ISelectedCalendarDates SelectedDates
@inject FileManagerService FileManager
@inject ICalendarStorage CalendarStorage
@inject CalendarViewOptionsStore ViewOptionsStore

<CalendarTour Enabled="@(Tour == true)"></CalendarTour>

<ViewOrientation Orientation="@_orientation">
    <Header IsActive="_selectedDates.Any()">
        @if (_selectedDates.Any())
        {
            <div class="ms-2">
                <DateSelectionSummary SelectedDates="_selectedDates"/>
            </div>
            <div>
                <IconAction OnClick="OnSelectedClearClickAsync" Title="Cancel selected days" IsActive="true">
                    <XMarkIcon class="size-6 sm:size-8"></XMarkIcon>
                </IconAction>
            </div>
        }
        else
        {
            <div class="flex justify-center content-center">
                <IconAction Title="Back" Url="/">
                    <ArrowLeftIcon class="size-6 sm:size-8"/>
                </IconAction>
                <span class="hidden sm:block ps-10 sm:ps-12 text-xl">
                    <CurrentDate Value="@_today"></CurrentDate>
                </span>
            </div>
            <div>
                @* Navigation - View Options | Settings | Share *@
                <span>
                    <IconAction Title="View options" OnClick="HandleViewOptionsClick">
                        <EyeIcon class="size-6 sm:size-8"></EyeIcon>
                    </IconAction>
                </span>
                <span class="ms-2 sm:ms-4">
                    <IconAction Url="@($"cal/{_calendar.Id}/edit")" Title="Settings">
                        <Cog8ToothIcon class="size-6 sm:size-8"></Cog8ToothIcon>
                    </IconAction>
                </span>
                <FeatureSwitch Name="plus">
                    <span class="ms-2 sm:ms-4">
                        <IconAction Title="Share" OnClick="HandleShareOptionsAsync">
                            <ArrowUpOnSquare class="size-6 sm:size-8"></ArrowUpOnSquare>
                        </IconAction>
                    </span>
                </FeatureSwitch>
            </div>
        }
    </Header>


    <article class="mb-16 mx-4">
        @* Calendar title and description *@
        <h1 class="container mx-auto mt-8 sm:mt-16 text-center text-lg sm:text-4xl font-medium sm:font-normal text-gray-800">@_calendar.Title</h1>
        @if (!string.IsNullOrEmpty(_calendar.Description))
        {
            <div class="container mx-auto mt-1 sm:mt-2 text-center text-base sm:text-lg text-gray-500">@_calendar.Description&nbsp;</div>
        }

        @* Display the calendar and optional legend *@
        @* Small screens in portrait display the legend below the calendar. *@
        @* Larger screens in portrait display the legend fixed to the right. *@
        <div class="flex mt-16 sm:mt-24 vport:flex-col vport:md:flex-row vport:md:container vport:md:mx-auto vport:justify-center
                vland:flex-col vland:justify-start">
            @* Calendar *@
            <div class="vland:overflow-x-scroll vland:md:overflow-x-visible vland:py-4 vport:flex vport:flex-col">
                <div class="vland:lg:min-w-[1900px] vport:md:min-w-[450px] vport:mb-8">
                    <YearSpan @ref="_yearSpan" FromDate="_calendar.StartDate"
                              CurrentDate="_today"
                              Activities="_calendar.Activities"
                              ShowAllDates="_showDates"
                              EnableSprint="_calendar.EnableSprint"
                              SprintStartDate="_calendar.SprintStartDate"
                              SprintInterval="_calendar.SprintInterval"
                              OnDateSelectAsync="OnDateSelectAsync">
                    </YearSpan>
                </div>
            </div>
            @* Aside section *@
            <aside class="vport:md:ms-10 vport:md:mt-8 vland:my-8 w-64 max-w-64">
                @* Legend *@
                @if (_showLegend && !_selectedDates.Any())
                {
                    <div class="vport:md:sticky vport:md:top-28">
                        <Legend Activities="_calendar.Activities" CalendarId="_calendar.Id"
                                OnActivityClickAsync="OnLegendActivitySelect"></Legend>
                    </div>
                }
            </aside>
        </div>
    </article>
</ViewOrientation>
<ScrollToElement ElementId="@("day_" + _today.StartOfMonth().AddDays(-14).ToString("yyyyMMdd"))"></ScrollToElement>

@* View options panel *@
<Drawer @bind-IsOpen="_showViewOptions" Title="" IsModal="true">
    @* Orientation *@
    <div class="mb-8">
        <div class="">
            <label class="text-lg">Orientation</label>
        </div>
        <div class="flex flex-row justify-between">
            <ToggleButton OnClick="HandleViewPortraitClick" IsActive="_orientation != ViewOrientationType.Landscape">
                <DevicePhoneMobileIcon class="size-6 sm:size-8 me-2"></DevicePhoneMobileIcon>
                <span>Portrait</span>
            </ToggleButton>
            <ToggleButton OnClick="HandleViewLandscapeClick" IsActive="_orientation == ViewOrientationType.Landscape">
                <DevicePhoneMobileIcon class="size-6 sm:size-8 me-2 rotate-90"></DevicePhoneMobileIcon>
                <span>Landscape</span>
            </ToggleButton>
        </div>
    </div>
    @* show legend *@
    <div class="mb-8">
        <Toggle Title="Show legend" @bind-Value="_showLegend">The activity titles will appear on the calendar view.</Toggle>
    </div>
    @* show date *@
    <div>
        <Toggle Title="Display Dates" @bind-Value="_showDates">The date will be shown on all days.</Toggle>
    </div>
    <div class="mb-8 sm:mt-16 flex justify-end">
        <SecondaryAction OnClickAsync="HandleViewOptionsChangeAsync">Apply to all calendars</SecondaryAction>
    </div>
</Drawer>

@* Activity details panel *@
<Drawer @bind-IsOpen="_showLegendDetail" Title="">
    @if (_selectedActivity != null)
    {
        <div class="text-lg mb-2">@_selectedActivity.Title</div>
        @if (_selectedActivity.Count > 0)
        {
            <div class="mb-1">#️⃣ Total: @_selectedActivity.Count</div>
        }
        @if (!string.IsNullOrEmpty(_selectedActivity.NextDateText))
        {
            <div class="mb-1">➡️ Next: @_selectedActivity.DaysToNext @("day".Pluralise(_selectedActivity.DaysToNext)) away</div>
        }
        @if (!string.IsNullOrEmpty(_selectedActivity.LastDateText))
        {
            <div class="mb-1">⬅️ Previous: @_selectedActivity.DaysFromPrevious ago</div>
        }
        <div class="mt-16">
            <PrimaryTextAction OnClickAsync="() => ToggleActivityVisibilityAsync(_selectedActivity.Id)">@(_selectedActivity.IsShown ? "HIDE" : "SHOW") DATES</PrimaryTextAction>
        </div>
    }
</Drawer>

@* Sharing options panel *@
<FeatureSwitch Name="plus">
    <Drawer @bind-IsOpen="_showShareOptions" Title="" IsModal="true">
        <FormAction Title="Publish calendar" Text="Publish" OnClickAsync="HandlePublishAsync">Anyone can access view calendar.</FormAction>
        @if (_calendar.Publication != null)
        {
            var publishUrl = $"http://minicalendar.app/gallery/cal/{_calendar.Publication.Id}";
            <div class="text-sm text-gray-500">
                <div class="mt-2 sm:mt-2">
                    <span>ID: </span><span>@_calendar.Publication.Id</span>
                </div>
                <div class="mt-2 sm:mt-2">
                    <span>URI: </span><a href="@publishUrl" class="text-gray-500 hover:text-green-400">@publishUrl</a>
                </div>
                <div class="mt-2 sm:mt-2">
                    <PrimaryTextAction OnClickAsync="HandleUnpublishAsync">Remove</PrimaryTextAction>
                </div>
            </div>
        }

        <FormAction Title="Export calendar" Text="Export" OnClickAsync="HandleExportAsync">Download an export file for back up.</FormAction>
    </Drawer>
</FeatureSwitch>

@if (_selectedDates.Any())
{
    <CalendarActions Activities="_calendar.Activities" SelectedDates="_selectedDates" CalendarId="_calendar.Id"
                     OnSelected="async (activity) => await HandleActivityClickAsync(activity.Id)"
                    OnCreate="HandleCreateActivityClickAsync" />
}

@code {
    private DateOnly _today;
    private Calendar _calendar = new();
    private List<DateOnly> _selectedDates = [];
    private bool _showViewOptions;
    private ViewOrientationType _orientation = ViewOrientationType.Default;
    private bool _showLegend = true;
    private bool _showDates = true;
    private bool _showLegendDetail;
    private SelectedActivity? _selectedActivity;
    private YearSpan _yearSpan = new();
    private bool _showShareOptions;

    [Parameter] public Guid Id { get; set; }
    [Parameter] [SupplyParameterFromQuery] public DateOnly? Today { get; set; }
    [Parameter] [SupplyParameterFromQuery] public bool? Tour { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var viewOptions = await ViewOptionsStore.GetAsync();
        PopulateViewOptions(viewOptions);

        await base.OnInitializedAsync();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        var now = TimeProvider.GetLocalNow().DateTime;
        _today = Today ?? now.ToDateOnly();

        _calendar = await CalendarRepository.GetByIdAsync(Id);
        if (_calendar == Calendar.Empty)
        {
            Nav.NavigateTo("notfound");
            return;
        }

        await CalendarRepository.RecordView(_calendar);

        await base.OnParametersSetAsync();
    }

    private Task OnLegendActivitySelect(Activity e)
    {
        Logger.LogInformation($"OnLegendActivitySelect({e.Title})");
        var activity = _calendar.Activities.SingleOrDefault(x => x.Id == e.Id);
        if (activity == null)
        {
            return Task.CompletedTask;
        }
        
        _selectedActivity = new SelectedActivity
        {
            Id = activity.Id,
            Title = activity.Title,
            Count = activity.Dates.Count,
            IsShown = activity.IsShown
        };
        
        DateOnly? nextDate = activity.Dates.FirstOrDefault(x => x >= _today);
        if (nextDate.HasValue && nextDate > DateOnly.MinValue && nextDate != _today)
        {
            var diff = _today.Difference(nextDate.Value);
            _selectedActivity.DaysToNext = diff.TotalDays;
            _selectedActivity.NextDateText = $"{diff.TotalDays} days until the next activity.";
        }
        
        DateOnly? lastDate = activity.Dates.FirstOrDefault(x => x < _today);
        if (lastDate.HasValue && lastDate > DateOnly.MinValue && lastDate != _today)
        {
            var diff = _today.Difference(lastDate.Value);
            _selectedActivity.DaysFromPrevious = diff.TotalDays;
            _selectedActivity.LastDateText = $"{diff.TotalDays} days since the last activity.";
        }

        _showViewOptions = false;
        _showLegendDetail = true;
         return Task.CompletedTask;
    }

    private Task OnDateSelectAsync(YearSpan.DateSelectedEvent evt)
    {
        _selectedDates = evt.AllDates.ToList();

        HideAllDrawers();
        
        return Task.CompletedTask;
    }

    private void HideAllDrawers()
    {
        _showLegendDetail = false;
        _showViewOptions = false;
    }

    private async Task OnSelectedClearClickAsync()
    {
        await _yearSpan.ClearSelectedAsync();
        _selectedDates = [];
    }

    private async Task HandleActivityClickAsync(Guid activityId)
    {
        if (!_selectedDates.Any())
        {
            return;
        }
    
        var evt = _calendar.Activities.SingleOrDefault(x => x.Id == activityId);
        if (evt == null)
        {
            return;
        }
    
        if (_selectedDates.All(x => evt.Dates.Contains(x)))
        {
            // remove
            foreach (var date in _selectedDates)
            {
                evt?.RemoveDate(date);
            }
        }
        else
        {
            // add
            foreach (var date in _selectedDates)
            {
                evt?.AddDate(date);
            }
        }
    
        await CalendarRepository.SaveItemAsync(_calendar);
    
        await _yearSpan.ClearSelectedAsync();
        _selectedDates = [];
    }
    
    private async Task HandleCreateActivityClickAsync()
    {
        await SelectedDates.ClearAsync();
        await SelectedDates.AddAsync(_selectedDates);
        Nav.NavigateTo($"cal/{_calendar.Id}/activities/create");
    }
    
    private Task HandleViewPortraitClick()
    {
        _orientation = ViewOrientationType.Portrait;
        return Task.CompletedTask;
    }
    
    private Task HandleViewLandscapeClick()
    {
        _orientation = ViewOrientationType.Landscape;
        return Task.CompletedTask;
    }

    private Task HandleViewOptionsClick()
    {
        _showLegendDetail = false;
        _showShareOptions = false;
        _showViewOptions = !_showViewOptions;

        return Task.CompletedTask;
    }

    private Task ToggleActivityVisibilityAsync(Guid id)
    {
        var activity = _calendar.Activities.SingleOrDefault(x => x.Id == id);
        if (activity == null)
        {
            return Task.CompletedTask;
        }

        activity.IsShown = !activity.IsShown;
        if (_selectedActivity != null)
        {
            _selectedActivity.IsShown = activity.IsShown;
        }

        return Task.CompletedTask;
    }

    private Task HandleShareOptionsAsync()
    {
        _showLegendDetail = false;
        _showViewOptions = false;
        _showShareOptions = !_showShareOptions;
        return Task.CompletedTask;
    }

    /// <summary>
    /// Export a single calendar details as a json file.
    /// Can be used as a backup or direct upload to the public blob storage gallery. 
    /// </summary>
    private async Task HandleExportAsync()
    {
        var exportAsJson = JsonSerializer.Serialize(_calendar);
        var exportAsBytes = System.Text.Encoding.UTF8.GetBytes(exportAsJson);
        await FileManager.SaveAsAsync($"cal_{_calendar.Id}.json", exportAsBytes);
    }

    /// <summary>
    /// Simple quick method to upload a calendar to blob storage so that it can be made available publicly.
    /// Overwrite any existing publication with the latest changes.
    /// </summary>
    private async Task HandlePublishAsync()
    {
        var isPublished = _calendar.Publication != null;

        if (!isPublished)
        {
            _calendar.Publication = new CalendarPublication
            {
                Id = _calendar.Id
            };
        }

        await CalendarStorage.UpdateAsync(_calendar);

        await CalendarRepository.SaveItemAsync(_calendar);
    }

    /// <summary>
    /// Undo publishing by deleting a published calendar from blob storage.
    /// </summary>
    private async Task HandleUnpublishAsync()
    {
        var isPublished = _calendar.Publication != null;
        if (!isPublished)
        {
            return;
        }

        await CalendarStorage.RemoveAsync(_calendar.Id);
        
        _calendar.Publication = null;
        await CalendarRepository.SaveItemAsync(_calendar);
    }

    private async Task HandleViewOptionsChangeAsync()
    {
        await ViewOptionsStore.SaveAsync(GetViewOptions());
        _showViewOptions = false;
    }

    private CalendarViewOptions GetViewOptions()
    {
        var options = new CalendarViewOptions
        {
            DisplayDates = _showDates,
            Orientation = _orientation,
            ShowLegend = _showLegend
        };
        return options;
    }

    private void PopulateViewOptions(CalendarViewOptions viewOptions)
    {
        _showDates = viewOptions.DisplayDates;
        _orientation = viewOptions.Orientation;
        _showLegend = viewOptions.ShowLegend;
    }

    private class SelectedActivity
    {
        public Guid Id { get; set; } = Guid.Empty;
        public string Title { get; set; } = string.Empty;
        public int Count { get; set; }
        public string NextDateText { get; set; } = string.Empty;
        public string LastDateText { get; set; } = string.Empty;
        public int DaysToNext { get; set; }
        public int DaysFromPrevious { get; set; }
        public bool IsShown { get; set; }
    }

}