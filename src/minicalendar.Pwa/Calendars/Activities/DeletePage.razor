@page "/cal/{CalendarId:guid}/activities/{id:guid}/delete"
@using minicalendar.Common.Calendars
@using minicalendar.Common.Calendars.Activities
@* @inject SiteNavigator Nav *@
@inject NavigationManager Nav
@inject ICalendarRepository CalendarRepo

<Header>
    <div><IconAction OnClick="HandleCancelClickAsync" Title="Cancel"><XMarkIcon class="size-6 sm:size-8"></XMarkIcon></IconAction></div>
</Header>

<article>
    <Container>
        <div>
            <h2 class="mb-2 my-4 text-xl font-medium">Delete activity</h2>
            <p class="">Are you sure you want to delete "@_model.Title"?</p>
        </div>
        <div class="mt-16">
            <PrimaryButton OnClickAsync="HandleCancelClickAsync">Keep</PrimaryButton>
            <DangerButton OnClickAsync="HandleDeleteClickAsync">Delete</DangerButton>
        </div>
    </Container>
</article>


@code {
    private Activity _model = new();
    private Calendar _calendar = new();

    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public Guid CalendarId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _calendar = await CalendarRepo.GetByIdAsync(CalendarId);
        var activity = _calendar.Activities.SingleOrDefault(x => x.Id == Id);
        if (activity == null)
        {
            Nav.NavigateTo("notfound");
            return;
        }
        _model = activity;
        await base.OnParametersSetAsync();
    }

    private async Task HandleDeleteClickAsync()
    {
        var cal = await CalendarRepo.GetByIdAsync(_calendar.Id);
        if (cal != Calendar.Empty)
        {
            await cal.RemoveActivityByIdAsync(_model.Id);
            await CalendarRepo.SaveItemAsync(cal);
        }

        Nav.NavigateTo($"cal/{_calendar.Id}/activities/list");
    }
    
    private Task HandleCancelClickAsync()
    {
        Nav.NavigateTo($"cal/{_calendar.Id}/activities/{_model.Id}/edit");
        return Task.CompletedTask;
    }

}
