@using Microsoft.Extensions.Logging
@using minicalendar.Common.Icons
@using minicalendar.Common.Headers
@inject ILogger<Drawer> Logger

<aside class="fixed bottom-0 w-full z-50 bg-gray-800 text-white ease-out duration-200
        sm:top-16 sm:w-96 sm:h-full sm:overflow-y-auto
        rounded-tl-lg rounded-tr-lg sm:rounded-tr-none
        @(IsOpen ? "sm:right-0" : "hidden sm:block sm:-right-96")">
    @* <div class="my-2 sm:mb-8 px-5"> *@
    <div class="my-4 sm:mb-8">
        @* <div class="flex w-full justify-center sm:justify-between items-center sm:min-h-16"> *@
        <div class="flex w-full justify-between">
            @* <div class="text-lg hidden sm:block">@Title</div> *@
            <div class="text-lg ps-4">@Title</div>
            <div>
                @* <IconAction Class="py-1 sm:hidden" OnClick="() => SetIsOpen(false)" Title="Close"> *@
                @*     <ChevronDownIcon></ChevronDownIcon> *@
                @* </IconAction> *@
                @* <IconAction Class="hidden sm:block" OnClick="() => SetIsOpen(false)" Title="Close"> *@
                @*     <XMarkIcon class="size-8"></XMarkIcon> *@
                @* </IconAction> *@
                <IconAction OnClick="() => SetIsOpen(false)" Title="Close">
                    <XMarkIcon class="size-6 sm:size-8"></XMarkIcon>
                </IconAction>
            </div>
        </div>
    </div>
    <div class="container mx-auto px-4">
        <div class="pb-16">
            @ChildContent
        </div>
    </div>
</aside>
@if (IsModal)
{
    <div class="top-0 left-0 h-screen w-screen z-40 bg-gray-900 opacity-50
    @(IsOpen ? "fixed" : "hidden")" @onclick="() => SetIsOpen(false)"></div>
}

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public bool IsModal { get; set; }
    [Parameter] public required RenderFragment ChildContent { get; set; }

    private bool _isOpen;
    [Parameter]
    public bool IsOpen
    {
        get => _isOpen; 
        set => _isOpen = value;
    }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    private async Task SetIsOpen(bool value)
    {
        _isOpen = value;
        await IsOpenChanged.InvokeAsync(value);
    }
}